import org.gradle.internal.os.OperatingSystem

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		google()
		gradlePluginPortal()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url 'https://s01.oss.sonatype.org' }
		maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
	}

	dependencies {
	}
}

plugins {
	alias(libs.plugins.gradleVersionUpdate)
	alias(libs.plugins.versionCatalogUpdate)
	alias(libs.plugins.spotless)
}

versionCatalogUpdate {
	catalogFile = file("libs.versions.toml")

	keep {
		keepUnusedVersions = true
		keepUnusedLibraries = true
		keepUnusedPlugins = true
	}
}

ext {
	isRelease = {
		return project.hasProperty("RELEASE")
	}

	getSnapshotRepositoryURL = {
		return "https://s01.oss.sonatype.org/content/repositories/snapshots/"
	}

	getReleaseRepositoryURL = {
		return "https://s01.oss.sonatype.org/service/local/"
	}
}


allprojects {
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "com.diffplug.spotless"

	group = "com.vabrantgames.actionsystem"

	buildscript {
		repositories {
			google()
			mavenLocal()
			mavenCentral()
			gradlePluginPortal()
			maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
			maven { url "https://oss.sonatype.org/content/repositories/releases/" }
			maven { url 'https://s01.oss.sonatype.org' }
			maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
			maven { url 'https://jitpack.io' }
		}
	}

	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url 'https://s01.oss.sonatype.org' }
		maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
		maven { url "https://jitpack.io" }
	}

	spotless {
		enforceCheck = true

		java {
			target '**/*.java'
			removeUnusedImports()
			eclipse().configFile new File(rootProject.projectDir.absolutePath, 'eclipse-formatter.xml')
		}

		groovyGradle {
			target '*.gradle'
			greclipse().configFile new File(rootProject.projectDir.absolutePath, 'eclipse-formatter.xml')
		}
	}
}

task("openCatalog", type: Exec) {
	File f = file('build/dependencyUpdates/report.txt')

	doFirst {
		if (!f.isFile()) {
			commandLine 'echo', "No report file found. Run task 'versionCatalogUpdate'"
			return
		}
	}

	if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
		commandLine 'open'
		args([
			'-a',
			'TextEdit',
			f.absolutePath
		])
	} else {
		commandLine 'echo', "[OpenCatalog task] Windows not tested"
	}
}

openCatalog.configure { dependsOn('versionCatalogUpdate') }

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

tasks.eclipse.doLast {
	delete ".project"
	delete ".classpath"
	delete ".settings/"
}
